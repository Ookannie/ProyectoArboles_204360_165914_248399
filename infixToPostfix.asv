function postfix = infixToPostfix(expresion)
    operadores = java.util.Stack(); %Stack para guardar operadores
    postfix = [];
    
    chars = split(expresion);
    
    for i = 1:length(chars)
        
        if(chars{i} == '(')
            operadores.add(chars{i});
        elseif(chars{i} == ')')
            while (~operadores.isEmpty() && (operadores.peek() ~= '('))
                 postfix = [postfix operadores.pop()];
            end
            operadores.pop();
        
        
        elseif(~isstrprop(char, 'alphanum'))
            while((~operadores.isEmpty() && (menorPrecedencia(chars{i}, operadores.peek()))))
                 operadores.add(chars{i});
            end
        end
        
        if(isOperand(chars{i}))
            postfix = [postfix chars{i}];
        end
        
    end
    
    while(~operadores.isEmpty())
        postfix = [postfix operadores.pop()];
    end
     
end


function isOperator = isOperator(char)
    isOperator = ~isstrprop(char, 'alphanum');
end

function isOperand = isOperand(char)
    isOperand = isstrprop(char, 'alpha');
end

